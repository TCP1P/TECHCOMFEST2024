local env = {
    debug = {
        getinfo=debug.getinfo
    },
    bit32 = bit32
}

io.write([[
    
  __   __  _______  ______    __   __  ___   _  _______ 
 |  | |  ||   _   ||    _ |  |  | |  ||   | | ||   _   |
 |  |_|  ||  |_|  ||   | ||  |  | |  ||   |_| ||  |_|  |
 |       ||       ||   |_||_ |  |_|  ||      _||       |
 |       ||       ||    __  ||       ||     |_ |       |
 |   _   ||   _   ||   |  | ||       ||    _  ||   _   |
 |__| |__||__| |__||___|  |_||_______||___| |_||__| |__|

]])
io.write('> ')
io.flush()

local input = io.read()

local code = string.format([[
function check_flag(s)
    ct = {0xe9,0xee,0xf4,0xe5,0xe3,0xe8,0xe6,0xe5,0xf3,0xf4,0xdb,0xc3,0xcf,0xce,0xc7,0xd2,0xc1,0xd4,0xd3,0xff,0xd9,0xcf,0xd5,0xff,0xca,0xd5,0xd3,0xd4,0xff,0xc4,0xc9,0xc4,0xff,0xc2,0xcc,0xc9,0xce,0xc4,0xff,0xd0,0xd7,0xce,0xff,0xcf,0xd2,0xff,0xcd,0xc1,0xd9,0xc2,0xc5,0xff,0xc2,0xcc,0xc9,0xce,0xc4,0xff,0xd3,0xc1,0xce,0xc4,0xc2,0xcf,0xd8,0xff,0xc2,0xd5,0xd4,0xff,0xd7,0xc8,0xcf,0xff,0xc3,0xc1,0xd2,0xc5,0xd3,0xff,0xc9,0xd4,0xd3,0xff,0xc1,0xcc,0xcc,0xff,0xc1,0xc2,0xcf,0xd5,0xd4,0xff,0xf2,0xf3,0xe1,0xff,0xc1,0xc6,0xd4,0xc5,0xd2,0xff,0xc1,0xcc,0xcc,0xdd}

    if #s ~= #ct then
        return false
    end

    for i = 1, #s do
        if bit32.bxor(s:byte(i), 0xA0) ~= ct[i] then
            return false
        end
    end
    
    return true
end

local result = ''
if check_flag('%s') then
    result = 'Correct!'
else
    result = 'Nope.'
end

return result
]], input)

local src, err = load(code, nil, 't', env)
if not src then
    io.write('Error: ' .. err .. '\n')
else
    local output = {pcall(src)}
    if output[1] then
        io.write(output[2] .. '\n')
    else
        io.write('Error: ' .. output[2] .. '\n')
    end
end
io.flush()

--[[
Payload: ') or 1==1 then return debug.getinfo(check_flag, 'S').source; end if 1==2 then --
]]--